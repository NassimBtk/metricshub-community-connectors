---
sudoCommands:
- ethtool
connector:
  detection:
    criteria:
    # DETECTION
    - type: deviceType
      keep:
      - Linux
    - type: commandLine
      commandLine: ${constant::GLOBAL_COMMAND_LINE}
      expectedResult: LOOPBACK
monitors:
  network:
    discovery:
      sources:
        source(1):
          # Discovery
          # Source(1) = output of the command ipconfig or ip
          type: commandLine
          commandLine: ${constant::GLOBAL_COMMAND_LINE}
          computes:
            # Process the output of one of the two commands (ifconfig or ip) through an AWK script
            # DeviceID;MacAddress;IPAddress;
          - type: awk
            script: ${file::networkDiscovery.awk}
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4"
        source(2):
          # Discovery
          # Source(2) = output of the command ls -l /sys/class/net
          type: commandLine
          commandLine: ls -l /sys/class/net
          computes:
            - type: awk
              script: |
                $0 !~ /virtual/ && $0 !~ /total/ {print $9}
        source(3):
          type: tableJoin
          leftTable: ${source::monitors.network.discovery.sources.source(2)}
          rightTable: ${source::monitors.network.discovery.sources.source(1)}
          leftKeyColumn: 1
          rightKeyColumn: 1
      mapping:
        # InstanceTable = Source(1)
        source: ${source::monitors.network.discovery.sources.source(3)}
        attributes:
          id: $1
          physical_address: $3
          physical_address_type: MAC
          logical_address: $4
          logical_address_type: IP
          hw.parent.type: enclosure
          name: $1
    collect:
      # Collect
      # Collect type is: mono-collect
      type: monoInstance
      sources:
        source(1):
          # Source(1) = output of the ipconfig or ip command for this interface
          type: commandLine
          commandLine: ${constant::COLLECT_COMMAND_LINE}
          computes:
            # Process the output of one of the two commands (ifconfig or ip) to retrieve statistics about the network interface
            # DeviceID;ReceivedPackets;TransmittedPackets;Errors;ReceivedBytes;TransmittedBytes;
          - type: awk
            script: ${file::networkCollect.awk}
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6,7"
        source(2):
          # Source(2) = output of ethtool
          type: commandLine
          commandLine: "%{SUDO:ethtool}/usr/sbin/ethtool ${attribute::id}"
          computes:
            # Process the output of ethtool through an AWK script
            # DeviceID;LinkStatus;LinkSpeed;DuplexMode;
          - type: awk
            script: ${file::ethtool.awk}
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
        source(3):
          # Source(3) = table joint of Source(1) and Source(2)
          # DeviceID;ReceivedPackets;TransmittedPackets;Errors;ReceivedBytes;TransmittedBytes;DeviceID;LinkStatus;LinkSpeed;DuplexMode;
          type: tableJoin
          leftTable: ${source::monitors.network.collect.sources.source(1)}
          rightTable: ${source::monitors.network.collect.sources.source(2)}
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;;;
      mapping:
        # And here is the ValueTable
        source: ${source::monitors.network.collect.sources.source(3)}
        metrics:
          hw.network.packets{direction="receive"}: $2
          hw.network.packets{direction="transmit"}: $3
          hw.errors{hw.type="network"}: $4
          hw.network.io{direction="receive"}: $5
          hw.network.io{direction="transmit"}: $6
          hw.network.up: legacyLinkStatus($8)
          hw.network.bandwidth.limit: megaBit2Byte($9)
          hw.network.full_duplex: legacyFullDuplex($10)